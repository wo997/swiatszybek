/* js[view] */

domload(() => {
	/** @type {FirstComponent} */
	// @ts-ignore
	const my_list_node = $(".my_list");

	createFirstCompontent(my_list_node);
	my_list_node._setData({
		id: 5,
		name: "asdsad",
		state: 1,
	});
});

/**
 * @typedef {{
 * id: number
 * name: string
 * state: number
 * }} FirstComponentData
 */

/**
 * @typedef {{
 * _data: FirstComponentData
 * _prevData: FirstComponentData
 * _setData(data?: FirstComponentData)
 * _getData()
 * _crazyNode: PiepNode
 * } & BaseComponent} FirstComponent
 */

/**
 * @param {FirstComponent} node
 * @param {FirstComponentData} data
 */
function createFirstCompontent(node, data = undefined) {
	node._setData = (/** @type {FirstComponentData} */ data = undefined) => {
		data = setComponentData(node, data);

		node._crazyNode.setContent(`
            This string was generated by the compontent ${JSON.stringify(data)}
        `);

		node._prevData = data;
	};

	node.setContent(/*html*/ `
        <div>
            <h3>Type the name: </h3>
            <input type="text" class="field" data-input="name"/></span>
            <br>

            <h3>And here it is!: </h3>
            <span data-output="name" data-type="html"></span>
            <br>

            <h3>Oh, and the id: </h3>
            <span data-output="id" data-type="html"></span>
            <br>

            <h3>Some state </h3>
            <checkbox data-input="state"></checkbox>
            <br>

            <h3>Fancy stuff</h3>
            <div class="crazy"></div>
        </div>
    `);

	node._crazyNode = node.find(".crazy");

	extendBaseComponent(node);

	if (data === undefined) {
		data = { id: -1, name: "", state: 0 };
	}

	node._setData(data);
}

/**
 * @typedef {{
 * _data: any
 * _outputNodes: PiepNode[]
 * _inputNodes: PiepNode[]
 * } & PiepNode} BaseComponent
 */

/**
 * @typedef {{
 * _setData(data?: any)
 * _getData()
 * _prevData: any
 * } & BaseComponent} BaseComponentEmpty
 */

/**
 * @param {BaseComponentEmpty} node
 * */
function extendBaseComponent(node) {
	node.classList.add("component");

	// kinda weird but it creates the checkbox subcomponent
	registerForms();

	node._outputNodes = node.findAll(`[data-output]`);
	node._inputNodes = node.findAll(`[data-input]`);
	node._inputNodes.forEach((sub_node) => {
		sub_node.addEventListener("change", () => {
			const name = sub_node.dataset.input;
			if (name === undefined) {
				return;
			}

			node._data[name] = sub_node.getValue();
			node._setData();
		});
		sub_node.addEventListener("input", () => {
			sub_node.dispatchChange();
		});
	});

	node._getData = () => {
		return node._data;
	};
}

/**
 * @param {BaseComponentEmpty} node
 * @param {any} data
 */
function setComponentData(node, data = undefined) {
	if (data === undefined) {
		data = node._data;
	} else {
		node._data = data;
	}

	[...node._outputNodes, ...node._inputNodes].forEach((e) => {
		const name = e.dataset.output || e.dataset.input;
		if (name === undefined) {
			return;
		}
		const value = data[name];
		if (value === undefined) {
			return;
		}

		e.setValue(value, { quiet: true });
	});

	node._prevData = data;

	return data;
}

let arr_a = [{ x: 1 }, { x: 2 }, { x: 3 }, { x: 4 }];
let arr_b = [{ x: 2 }, { x: 1 }, { x: 4 }, { x: 5 }];

/*let arr_a = [{ x: 1 }, { x: 2 }, { x: 3 }, { x: 4 }];
let arr_b = [{ x: 2 }, { x: 1 }, { x: 4 }, { x: 5 }];
component.setData([{ x: 1 }, { x: 2 }, { x: 3 }, { x: 4 }]);
component.data.push({ x: 6 });
//component.data.push(4);
component.setData();*/

/*console.log(
	diffArrays(arr_a, arr_b, (arr) => {
		return arr.map((e) => {
			return e.x;
		});
	})
);*/

/**
 * @typedef {{
 * from: number,
 * to: number,
 * }} movedKey
 */

/**
 * @typedef {{
 * added: Array,
 * moved: movedKey[],
 * removed: Array,
 * }} diffArrayResult
 */

/**
 * @callback compareKeyCallback
 * @param {Array} arr
 * @returns {Array}
 */

/**
 *
 * @param {Array} arr_1
 * @param {Array} arr_2
 * @param {compareKeyCallback} getKeys
 * @returns {diffArrayResult}
 */
function diffArrays(arr_1, arr_2, getKeys) {
	/** @type {diffArrayResult} */
	let diff = {
		added: [],
		moved: [],
		removed: [],
	};

	const keys_1 = getKeys(arr_1);
	const keys_2 = getKeys(arr_2);

	let index_1 = -1;
	for (const key_1 of keys_1) {
		index_1++;

		const index_2 = keys_2.indexOf(key_1);

		if (index_2 === -1) {
			diff.removed.push(index_1);
		} else if (index_1 !== index_2) {
			diff.moved.push({
				from: index_1,
				to: index_2,
			});
		}
	}

	let index_2 = -1;
	for (const key_2 of keys_2) {
		index_2++;

		const index_1 = keys_1.indexOf(key_2);

		if (index_1 === -1) {
			diff.added.push(index_2);
		}
	}

	return diff;
}

class MyComponent {
	constructor() {
		this.setData([]);
	}

	getData() {
		return this.data;
	}

	setData(value = null) {
		if (value !== null) {
			this.data = value;
		}

		if (this.prev_data) {
			console.log(
				"p",
				this.prev_data.length,
				"now",
				this.data.length,
				"diff",
				diffArrays(this.prev_data, this.data, (arr) => {
					return arr.map((e) => {
						// no typing here, but that's ok, we can assign it to the component
						return e.x;
					});
				})
			);
		}

		this.prev_data = cloneObject(this.data);
	}
}

// const my_compotent = new MyComponent();

// my_compotent */

// /**
//  * @typedef {{
//  * str: string
//  * num: number
//  * sub_rows: SomeSubRow[]
//  * }} SomeRow;
//  */

// /**
//  * @typedef {{
//  * abc: string
//  * }} SomeSubRow;
//  */
// domload(() => {
// 	/** @type {PiepListNode} */
// 	// @ts-ignore
// 	const my_list_node = $(".my_list");
// 	//const my_list_node = $(".my_list_controls");

// 	createList(my_list_node, {
// 		renderRow: (/** @type {SomeRow} */ row) => {
// 			return /*html*/ `
//                 <div>${row.str} / ${row.num}</div>
//                 <div>${row.str} / ${row.num}</div>
//             `;
// 		},
// 		onRowAdded: () => {},
// 		//controls: my_list_controls,
// 	});

// 	/**
// 	 * @type {SomeRow[]}
// 	 */
// 	let rows = [
// 		{
// 			str: "123",
// 			num: 456,
// 			sub_rows: [{ abc: "aaa" }, { abc: "bbb" }],
// 		},
// 		{
// 			str: "12345",
// 			num: 45678,
// 			sub_rows: [],
// 		},
// 	];
// 	my_list_node.list.setRows(rows);
// });

// /**
//  * @typedef {{
//  * renderRow(row)
//  * onRowAdded()
//  * controls?: PiepNode
//  * }} PiepListOptions;
//  */

// /**
//  * @typedef {{
//  * rows: Array
//  * setRows(rows)
//  * options: PiepListOptions
//  * }} PiepList;
//  */

// /**
//  * @typedef {{
//  * list: PiepList
//  * } & PiepNode} PiepListNode;
//  */

// /**
//  *
//  * @param {PiepListNode} node
//  * @param {PiepListOptions} options
//  */
// // @ts-ignore
// function createList(node, options = {}) {
// 	/** @type {PiepListNode} */
// 	// @ts-ignore
// 	const list_node = node;

// 	/** @type {PiepList} */
// 	const list = {};
// 	list_node.list = list;
// 	list_node.list.options = options;

// 	list.setRows = (rows) => {
// 		list.rows = rows;

// 		let html = ``;
// 		list.rows.forEach((row) => {
// 			html += options.renderRow(row);
// 		});
// 		node.setContent(html);
// 	};

// 	list.setRows([]);
// }

/**
 *
 * @param {*} node
 * @param {*} options
 */
// function addListControls(node, options = {}) {
// 	/** @type {PiepListNode} */
// 	// @ts-ignore
// 	const list_node = node;

// 	/** @type {PiepList} */
// 	const list = {};
// 	list_node.list = list;
// 	list_node.options = options;

// 	list.setRows = (rows) => {
// 		list.rows = rows;

// 		let html = ``;
// 		list.rows.forEach((row) => {
// 			html += options.renderRow(row);
// 		});
// 		node.setContent(html);
// 	};

// 	list.setRows([]);
// }
